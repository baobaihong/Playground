//
//  LocalFileManager.swift
//  Playground
//
//  Created by Jason on 2024/2/19.
//

import SwiftUI

class LocalFM {
    static let instance = LocalFM()
    let folderName = "MyApp_Images"
    
    private init() {
        createFolderIfNeeded()
    }
    
    func createFolderIfNeeded() {
        guard
            let path = FileManager
                .default
                .urls(for: .cachesDirectory, in: .userDomainMask)
                .first?
                .appending(path: folderName)
                .path() else {
            return
        }
        
        if !FileManager.default.fileExists(atPath: path) {
            do {
                try FileManager.default.createDirectory(atPath: path, withIntermediateDirectories: true)
                print("Success creating folder.")
            } catch let error {
                print("Error creating folder. \(error)")
            }
        }
    }
    
    func deleteFolder() {
        guard
            let path = FileManager
                .default
                .urls(for: .cachesDirectory, in: .userDomainMask)
                .first?
                .appending(path: folderName)
                .path() else {
            return
        }
        
        do {
            try FileManager.default.removeItem(atPath: path)
            print("Success deleting folder")
        } catch let error {
            print("Error deleting folder. \(error)")
        }
    }
    
    func saveImage(image: UIImage, name: String) -> String {
        
        guard
            let data = image.jpegData(compressionQuality: 1.0),
            let path = getPathForImage(name: name) else {
            return "Error transforming jpg to data"
        }
        
        do {
            try data.write(to: path)
            return "Success saving"
        } catch let error {
            return "Error saving \(error)"
        }
        
    }
    
    func getImage(name: String) -> UIImage? {
        guard
            let path = getPathForImage(name: name)?.path(),
            FileManager.default.fileExists(atPath: path) else {
            print("Error getting path")
            return nil
        }
        return UIImage(contentsOfFile: path)
    }
    
    func deleteImage(name: String) -> String {
        guard
            let path = getPathForImage(name: name)?.path(),
            FileManager.default.fileExists(atPath: path) else {
            return "Error getting path"
        }
        do {
            try FileManager.default.removeItem(atPath: path)
            return "Successfully deleted."
        } catch let error {
            return "Error deleting image. \(error)"
        }
    }
    
    func getPathForImage(name: String) -> URL? {
        // 3 most common directories that developers use
        // document directory: files that are generated by user and can not be re-generated by app
        //        let directory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
        // cache directory: files that can be discarded and re-generated
        //        let directory = FileManager.default.urls(for: .cachesDirectory, in: .userDomainMask).first
        // temporary directory
        //        let directory3 = FileManager.default.temporaryDirectory
        
        guard
            let path = FileManager
                .default
                .urls(for: .cachesDirectory, in: .userDomainMask)
                .first?
                .appending(path: folderName)
                .appending(path: "\(name).jpg") else {
            print("Error getting path")
            return nil
        }
        return path
    }
}

@Observable 
class LocalFileManagerViewModel {
    var image: UIImage? = nil
    let imageName: String = "cat"
    let manager = LocalFM.instance
    var infoMessage = ""
    
    init() {
        getImageFromFM()
        print("getting image from FM")
        guard image != nil else {
            getImageFromAssetsFolder()
            print("getting image from Assets")
            return
        }
    }
    
    private func getImageFromAssetsFolder() {
        image = UIImage(named: imageName)
    }
    
    func saveImage() {
        guard let image = image else { return }
        infoMessage = manager.saveImage(image: image, name: imageName)
    }
    
    func getImageFromFM() {
        image = manager.getImage(name: imageName)
    }
    
    func deleteImage() {
        infoMessage = manager.deleteImage(name: imageName)
        manager.deleteFolder()
    }
    
}

struct LocalFileManager: View {
    @State var vm = LocalFileManagerViewModel()
    
    var body: some View {
        NavigationStack {
            VStack {
                if let image = vm.image {
                    Image(uiImage: image)
                        .resizable()
                        .scaledToFill()
                        .frame(width: 200, height: 200)
                        .clipped()
                        .clipShape(RoundedRectangle(cornerRadius: 10))
                }
                HStack {
                    Button {
                        vm.saveImage()
                    } label: {
                        Text("Save to FM")
                            .foregroundStyle(.white)
                            .padding()
                            .background(Color.blue)
                            .clipShape(RoundedRectangle(cornerRadius: 10))
                    }
                    Button {
                        vm.deleteImage()
                    } label: {
                        Text("Delete from FM")
                            .font(.headline)
                            .foregroundStyle(.white)
                            .padding()
                            .background(Color.red)
                            .clipShape(RoundedRectangle(cornerRadius: 10))
                    }
                }
                Text(vm.infoMessage)
                    .font(.largeTitle)
                    .fontWeight(.semibold)
                    .foregroundStyle(.purple)
                Spacer()
            }
            .navigationTitle("File Manager")
        }
    }
}

#Preview {
    LocalFileManager()
}
